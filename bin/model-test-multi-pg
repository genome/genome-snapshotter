#!/usr/bin/perl

use Genome;
use Revision;
use Library;
use Users;
use JenkinsData;

use strict;
use warnings;


# flush output buffer after every write or print
local $| = 1;

log_environment();
validate_environment();

# set the title of this process
$0 = sprintf("%s %s # TEST_SPEC = %s", $^X, __FILE__, JenkinsData->test_spec);

# Per Model Customizations
print("Customizing test environment...\n");

set_genome_software_result_test_name();

# Done with Per Model Customizations
print "\n";

my $build = get_initial_build();
wait_for_build($build);

$build = UR::Context->current->reload('Genome::Model::Build', id => $build->id);

check_build_failure($build);

diff_build($build);


# functions
sub build_type {
    my $type = model()->class;
    $type =~ s/Genome::Model:://;
    $type =~ s/:://g;
    return Genome::Utility::Text::camel_case_to_string($type, '_');
}

sub log_environment {
    print "\n\n => Environment Info\n";
    print join("\n\t", "PATHs:", split(':', $ENV{PATH})), "\n";
    print join("\n\t", "PERL5LIBs:", split(':', $ENV{PERL5LIB})), "\n";
    print "\n";
}

sub validate_environment {
    if (index(JenkinsData->test_spec, 'GQP-') == 0 && !$ENV{GENOME_QUERY_POSTGRES}) {
        printf("TEST_SPEC starts with GQP but GENOME_QUERY_POSTGRES is not enabled!\n") and exit(255);
    }

    if (index(JenkinsData->test_spec, 'GQP-') == -1 && $ENV{GENOME_QUERY_POSTGRES}) {
        printf("TEST_SPEC does not start with GQP but GENOME_QUERY_POSTGRES is enabled!\n") and exit(255);
    }

    JenkinsData->validate_environment;
}

sub flow_git_revisions {
    my $core_rev = $ENV{FLOW_CORE_GIT_REVISION}
        || die("FLOW_CORE_GIT_REVISION is unset");
    my $site_rev = $ENV{FLOW_SITE_GIT_REVISION}
        || die("FLOW_SITE_GIT_REVISION is unset");
    my $workflow_rev = $ENV{FLOW_WORKFLOW_GIT_REVISION}
        || die("FLOW_WORKFLOW_GIT_REVISION is unset");

    return sprintf("FLOW-CORE=%s:FLOW-SITE=%s:FLOW-WORKFLOW=%s",
        $core_rev, $site_rev, $workflow_rev);
}

sub test_version {
    my $test_version = Revision->test_version();
    if ($ENV{GENOME_QUERY_POSTGRES}) {
        $test_version = "GQP-$test_version";
    }
    if ($ENV{WF_USE_FLOW}) {
        $test_version = "$test_version:" . flow_git_revisions();
    }

    return $test_version;
}

sub model_subname {
    my $test_spec = JenkinsData->test_spec;
    $test_spec =~ s/^GQP-//;
    my ($perl_version, $model_subname) = $test_spec =~ /(.*?)-(.*)/;
    if ($perl_version ne Revision->perl_version()) {
        printf("Perl version specified by TEST_SPEC (%s) does not match running version (%S)!\n",
            $perl_version, Revision->perl_version()) and exit(255);
    }
    return $model_subname;
}

sub should_shortcut {
    my @MODELS_THAT_ARE_FAST_AND_DONT_NEED_TO_SHORTCUT = (
        'reference-alignment',
        'somatic-variation',
        'somatic-short',
        'somatic-validation',
        'somatic-variation-short',
        'somatic-variation-sv-detection',
    );
    my $model_subname = shift;
    return !grep {$_ eq $model_subname} @MODELS_THAT_ARE_FAST_AND_DONT_NEED_TO_SHORTCUT;
}

sub set_genome_software_result_test_name {
    unless (should_shortcut(model_subname())) {
        printf("Set GENOME_SOFTWARE_RESULT_TEST_NAME to '%s'.\n", test_version());
        $ENV{GENOME_SOFTWARE_RESULT_TEST_NAME} = test_version();
    }
}

sub model {
    my $model_name = sprintf('apipe-test-%s', model_subname());
    my $model = Genome::Model->get(name => $model_name);
    if ($model) {
        printf("Found model (%s) with name '%s'.\n\n", $model->id, $model->name);
    } else {
        printf("Could not get test model by name (%S)!\n\n", $model_name) and exit(255);
    }
    return $model;
}

sub get_timeout {
    my %MODEL_TIMEOUTS = (
        'somatic-variation' => 36,
        'clinseq-v1' => 12,
    );
    my $DEFAULT_TIMEOUT = 6;
    my $timeout_hours = $MODEL_TIMEOUTS{model_subname()} || $DEFAULT_TIMEOUT;
    my $timeout_seconds = $timeout_hours * 3600;
    return $timeout_seconds;
}

sub send_timeout_mail {
    send_mail_with_topic('Timed Out');
}

sub send_fail_mail {
    send_mail_with_topic('Build Failed');
}

sub send_diff_mail {
    my $diff_cmd = shift;

    send_mail_with_topic('Diffs Found',
        '********************************************************************************',
        $diff_cmd->bless_message,
        '********************************************************************************',
        $diff_cmd->diffs_message);
}

sub send_mail_with_topic {
    my $topic = shift;
    my @extra_body = @_;

    unless ($ENV{WF_USE_FLOW}) {
        my ($to, $cc) = get_to_and_cc();

        Library::send_mail(
            from => 'apipe-tester@genome.wustl.edu',
            to => 'nnutter@genome.wustl.edu',
            subject => mail_subject($topic),
            body => mail_body(@extra_body),
        );
    }
}

sub mail_subject {
    my $topic = shift;
    return sprintf('%s - Build %d - %s', JenkinsData->test_spec,
        JenkinsData->build_number, $topic);
}

sub mail_body {
    return join("\n",
        sprintf('Project: %s', JenkinsData->job_name),
        sprintf('Build: %s', JenkinsData->build_url),
        sprintf('Console: %sconsole', JenkinsData->build_url),
        @_,
    );
}


sub get_to_and_cc {
    my $build_type = build_type();
    my @to = (Users->can($build_type)) ? Users->$build_type : Users::apipe();
    my @cc = Users::apipe();
    if ($ENV{GENOME_QUERY_POSTGRES}) {
        @to = ('apipe-tester');
        @cc = ();
    }
    return \@to, \@cc;
}

sub create_build {
    print("Creating new build....\n");
    my $build = Genome::Model::Build->create(
        model_id => model()->id,
        software_revision => test_version(),
    );
    unless ($build) {
        print("Could not create new build!\n") and exit(255);
    }
    print("Starting build...\n");
    unless ($build->start()) {
        print("Cound not start new build!\n") and exit(255);
    }
    print("Saving build...\n");
    unless (UR::Context->commit()) {
        print("Could not save new build!\n") and exit(255);
    }
    print("Build saved.\n");
    return $build;
}

sub get_initial_build {
    printf("GENOME_SOFTWARE_RESULT_TEST_NAME before getting build is %s\n",
        $ENV{GENOME_SOFTWARE_RESULT_TEST_NAME});

    my $build =  Genome::Model::Build->get(
        model_name => model()->name,
        run_by => 'apipe-tester',
        software_revision => test_version(),
        status => ['Scheduled', 'Running', 'Succeeded'],
    );

    if ($build) {
        printf("Got existing build (%s) for current test version.\n", $build->__display_name__);
    } else {
        $build = create_build();
    }
    return $build;
}

sub wait_for_build {
    my $build = shift;

    my $event = $build->the_master_event;
    unless ($event) {
        print("Could not get the build's master event!\n") and exit(255);
    }

    my $timeout = get_timeout();
    printf("Monitoring build (%s) until it completes or timeout of %s minutes is reached.\n\n",
        $build->id, $timeout / 60);

    my $start_time = time;
    while (!grep { $event->event_status eq $_ } ('Succeeded', 'Failed', 'Crashed')) {
        UR::Context->current->reload($event);

        my $elapsed_time = time - $start_time;
        if ($elapsed_time > $timeout) {
            send_timeout_mail();
            exit(255);
        }

        sleep(30);
    }
}

sub check_build_failure {
    my $build = shift;

    if ($build->status eq 'Succeeded') {
        printf("Build status is %s.\n", $build->status);
    } else {
        send_fail_mail();
        exit(255);
    }
}

sub diff_build {
    my $build = shift;

    printf('Starting diff (new build = %s)...', $build->id);
    my $diff_cmd = Genome::Model::Build::Command::DiffBlessed->create(
        new_build => $build,
    );
    unless ($diff_cmd->execute) {
        print("Diff command failed to execute!\n") and exit(255);
    }

    my $has_diffs = (defined($diff_cmd->_diffs) && scalar(keys %{$diff_cmd->_diffs})) || 0;
    if ($has_diffs) {
        send_diff_mail($diff_cmd);
        exit(255);
    }

}
