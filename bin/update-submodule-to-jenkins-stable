#!/usr/bin/env genome-perl

use strict;
use warnings;
use LWP::UserAgent;

my ($submodule, $jenkins_job) = @ARGV;
my $GIT_BRANCH = $ENV{GIT_BRANCH} || die 'GIT_BRANCH not set!';
my $GIT_LOCAL_BRANCH = qx(git rev-parse --abbrev-ref HEAD);
chomp $GIT_LOCAL_BRANCH;

my $current_submodule_revision = current_submodule_revision($submodule);
unless ($current_submodule_revision) {
    die "Unable to determine current_submodule_revision for $submodule";
}

my $last_stable_revision = last_stable_revision($jenkins_job);
unless ($last_stable_revision) {
    die "Unable to determine last_stable_revision for $jenkins_job";
}

if ($current_submodule_revision ne $last_stable_revision) {
    update_submodule($submodule, $last_stable_revision);
    print "$submodule: updated to $last_stable_revision\n";
} else {
    print "$submodule: current submodule revision matches last stable revision\n";
}

unless (system("git fetch") == 0) {
    die "Failed to fetch";
}
unless (system("git rebase $GIT_BRANCH") == 0) {
    die "Failed to rebase on $GIT_BRANCH";
}

sub update_submodule {
    my $submodule = shift || die;
    my $revision  = shift || die;

    my $short_revision = (length($revision) > 7 ? substr($revision, 0, 7) : $revision);

    unless (system("git submodule sync && git submodule update --init $submodule && cd $submodule && git fetch && git checkout -f $revision") == 0) {
        die "Failed to checkout $submodule to $revision";
    }
    unless (system("git commit $submodule -m 'updated $submodule submodule to $short_revision'") == 0) {
        die "Failed to commit $submodule update to $revision";
    }
}

sub last_stable_revision {
    my $project = shift || die;
    my $url_f = 'https://apipe-ci.gsc.wustl.edu/view/All/job/%s/lastStableBuild/api/xml?xpath=/freeStyleBuild/action/lastBuiltRevision/SHA1';
    my $url = sprintf($url_f, $project);

    my $ua = LWP::UserAgent->new(ssl_opts => { verify_hostname => 0 });
    $ua->agent("UpdateSubmodules/1.0");

    my $req = HTTP::Request->new(GET => $url);
    my $res = $ua->request($req);

    if ($res->is_success) {
        my ($sha1) = $res->content =~ />(.*)</;
        return $sha1;
    } else {
        print STDERR $res->status_line . "\n";
        return;
    }
}

sub current_submodule_revision {
    my $submodule = shift || die;
    my $cmd = "git ls-tree HEAD $submodule";
    # official: <mode> SP <type> SP <object> TAB <file>
    my ($mode, $type, $object, $file) = qx($cmd) =~ /^(\S+) (\S+) (\S+)\t(.*)$/;
    my $exit_code = $?;
    if ($exit_code == 0) {
        return $object;
    } else {
        return;
    }
}
