#!/usr/bin/perl

use strict;
use warnings;

use Genome;
use IPC::System::Simple qw(capture system);
use Date::Format qw(time2str);
use DateTime;

my $since_dt = since_dt();
my $since = $since_dt->strftime(UR::Context->date_template());
print("Checking for builds since $since...\n");
my $i = Genome::Model::Build::GenePrediction->create_iterator(
    status => ['Succeeded', 'Failed'],
    'date_completed >' => $since,
    run_by => Genome::Sys->username(),
);

while (my $b = $i->next) {
    print($b->id, "\n");
    for my $lsf_id ($b->child_lsf_jobs) {
        my @bjobs = capture(qq(bjobs $lsf_id 2> /dev/null));
        my $status = scalar(@bjobs) ? (split(/\s+/, $bjobs[-1]))[2] : '';
        if ($status eq 'RUN') {
            system(qq(bkill $lsf_id));
        }
    }
}

sub get_lastStableBuild_timestamp {
    my $url = sprintf('%s/lastStableBuild/api/xml?xpath=/freeStyleBuild/timestamp', $ENV{JOB_URL});
    my $curl = capture(qq(curl --silent --insecure "$url"));
    my $timestamp = ($curl =~ /^<timestamp>(\d+)<\/timestamp>$/)[0];
    return $timestamp;
}

sub since_dt {
    my $java_epoch = get_lastStableBuild_timestamp();
    my $since_dt;
    if ($java_epoch) {
        my $epoch = int($java_epoch/1000); # looks like the timestamp from Jenkins has three extra digits, presumably milliseconds
        my $prev_dt = DateTime->from_epoch(epoch => $epoch);
        $since_dt = $prev_dt->subtract(days => 1); # "paranoia" about object being committed after time
    } else {
        my $now_dt = DateTime->now();
        $since_dt = $now_dt->subtract(months => 2);
    }
    return $since_dt;
}
